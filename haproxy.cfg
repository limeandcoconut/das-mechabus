# Global configurations
global
  log 127.0.0.1 local0
  log 127.0.0.1 local1 notice
  tune.ssl.default-dh-param 2048 # required parameter for SSL bumping
  # Turn on for stdout logging
  # log stdout  format raw  local0  debug

# Default settings
defaults
  log     global
  mode    http # tcp can be used if you don't want to do SSL bumping
  option  httplog # tcplog can be used if you don't want to do SSL bumping
  option  dontlognull
  option http-server-close
  timeout connect  5s
  timeout client  10s
  timeout server  25s
  # Long timeout for WebSocket connections.
  timeout tunnel  3600s

frontend https
  bind *:80
  # You can use either a single folder or multiple crt definitions in this line (crt test.pem crt test2.pem)
  bind *:443 ssl crt /etc/ssl/cert.pem alpn h2,http/1.1

  # Access Control Lists
  # Add one acl and use_backend per domain
  # acl <aclname> <criterion> [flags] [operator] [<value>] ...
  # hdr(host) -i matches the host header case insensitive

  # Send rewrites requests for these files specificall so they can be served from root
  acl serve-root path_beg -i /robots.txt /sitemap.xml /browserconfig.xml /favicon.ico /service-worker.js

  # Request Rewrites
  # These happen nomatter where they are placed in this block but the order of them matters!
  # This will match any request for things from dist/proxy_to_site_root and rewrite it to a dir that, hopefully ðŸ¤¨, doesn't exist
  # There are two versions here. One is for the version of HAProxy available to the raspberry pi zero

  # http-request replace-path \/dist/proxy_to_site_root(\/.*)     /dist/intentionally_rewritten_this_should_404-fb9c8139-0149-45d2-b776-895b31f69904\1 # Docker
  reqrep ^([^\ :]*)\ \/dist/proxy_to_site_root(\/.*)     \1\ /dist/intentionally_rewritten_this_should_404-fb9c8139-0149-45d2-b776-895b31f69904\2 # PI Zero W

  # This'll match those any request listed in the serve-root acl and and rewrite it to be served properly
  # http-request replace-path ([\w:\.\/]+(?:[^\w\/].*)?) /dist/proxy_to_site_root\1 if serve-root # Docker
  reqrep ^([^\ :]*)\ (\/[\w\.\/]+(?:[^\w\/].*)?)    \1\ /dist/proxy_to_site_root\2 if serve-root # PI Zero W

  # Use websocket backend if the headers are present
  acl use-ws-api hdr(Upgrade) -i WebSocket
  acl use-ws-api hdr(Sec-WebSocket-Key) -m found

  # If the redirect is before a http-request replace-<type> it'll warn on start
  # This is because replace rules will pe executed even if it redirects
  # This will handle wss tls termination too
  redirect scheme https code 301 if !{ ssl_fc }

  use_backend backend-ws-api if use-ws-api

  default_backend backend-web

# Backends

backend backend-web
  option forwardfor
  server localhost localhost:3015 check # Linux
  # server host.docker.internal host.docker.internal:3015 check # Mac

backend backend-ws-api
  option forwardfor
  server localhost localhost:3535 check # Linux
  # server host.docker.internal host.docker.internal:3535 check # Mac
